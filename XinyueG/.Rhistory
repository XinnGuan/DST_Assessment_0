knitr::opts_chunk$set(echo = TRUE)
library(readr) #For read_csv
library(dplyr)
library("fs") # for cross-platform directories (path_wd)
library("knitr") # For kable
library("gplots")
data <- read_csv("~/Desktop/DST/DST_Assessment_0/Report/01-Data.csv")
data.f= as.data.frame(data)
#read_csv imported data as tbl which is a subclass of data frame, however it behaves differentlt so I convert it to data.frame format.
head(data.f)
summary(data.f)
barplot((sort(table(data.f[,"Embarked"]))),names.arg=c("Cherbourg","Queenstown","Southampton"))
barplot((table(data.f[,"Sex"])),names.arg=c("female","male"))
data.f<-data.f[-which(is.na(data.f$Embarked)),]
#Remove the rows with NA for Embarked variable.
labs=unique(as.character(data.f[,"Embarked"]))
names(labs)=labs
list=lapply(labs,function(x){
data.f[data.f[,"Embarked"]==x,1:11]
})
#Separate data in to three sub-data by the port of embark.
data.f %>% count(Embarked)
# Count each numbers of each value in the Embarked variable
#datamean=t(sapply(list,function(x)colMeans(x[,c(3,6,7,8,10)])))
#heatmap.2(datamean,trace="none")
#Plot heatmap withou Age variable
datamean2=t(sapply(list,function(x)colMeans(x[,c(3,7,8,10)])))
heatmap.2(datamean2,trace="none",margins=c(7,3))
fe_sur_rate
knitr::opts_chunk$set(echo = TRUE)
library(readr) #For read_csv
library(dplyr)
library("fs") # for cross-platform directories (path_wd)
library("knitr") # For kable
library("gplots")
data <- read_csv("~/Desktop/DST/DST_Assessment_0/Report/01-Data.csv")
data.f= as.data.frame(data)
#read_csv imported data as tbl which is a subclass of data frame, however it behaves differentlt so I convert it to data.frame format.
head(data.f)
summary(data.f)
barplot((sort(table(data.f[,"Embarked"]))),names.arg=c("Cherbourg","Queenstown","Southampton"))
barplot((table(data.f[,"Sex"])),names.arg=c("female","male"))
data.f<-data.f[-which(is.na(data.f$Embarked)),]
#Remove the rows with NA for Embarked variable.
labs=unique(as.character(data.f[,"Embarked"]))
names(labs)=labs
list=lapply(labs,function(x){
data.f[data.f[,"Embarked"]==x,1:11]
})
#Separate data in to three sub-data by the port of embark.
data.f %>% count(Embarked)
# Count each numbers of each value in the Embarked variable
#datamean=t(sapply(list,function(x)colMeans(x[,c(3,6,7,8,10)])))
#heatmap.2(datamean,trace="none")
#Plot heatmap withou Age variable
datamean2=t(sapply(list,function(x)colMeans(x[,c(3,7,8,10)])))
heatmap.2(datamean2,trace="none",margins=c(7,3))
data.f %>% count(Sex)
genders=unique(as.character(data.f[,"Sex"]))
names(genders)=genders
genders_data=lapply(genders,function(x){
data.f[data.f[,"Sex"]==x,]
})
male_data<-genders_data[1]
female_data<-genders_data[2]
female_data= as.data.frame(female_data)
male_data= as.data.frame(male_data)
# Separate data into two sub data by genders
fe_sur_rate <- sum(female_data$female.Survived)/dim(female_data)[1]
male_sur_rate <- sum(male_data$male.Survived)/dim(male_data)[1]
fe_sur_rate
male_sur_rate
View(data.f)
View(data.f)
hist([data.f[data.f$Survived==1,][Fare],data.f[data.f$Survived==0,][Fare]],col="r","g")
[data.f[data.f$Survived==1,][Fare]
[data.f[data.f$Survived==1,]
data.f[data.f$Survived==1,]
data.f[data.f$Survived==1,][Fare]
data.f[data.f$Survived==1,]$Fare
hist([data.f[data.f$Survived==1,]$Fare,data.f[data.f$Survived==0,]$Fare],col="r","g")
[data.f[data.f$Survived==1,]$Fare,data.f[data.f$Survived==0,]$Fare]
data.f[data.f$Survived==1,]$Fare,data.f[data.f$Survived==0,]$Fare
data.f[data.f$Survived==1,]$Fare
data.f[data.f$Survived==0,]$Fare
hist(data.f[data.f$Survived==1,]$Fare],col="r")
hist(data.f[data.f$Survived==1,]$Fare,col="r")
hist(data.f[data.f$Survived==1,]$Fare,col="red")
hist(data.f[data.f$Survived==1,]$Fare,col="blue")
hist(data.f[data.f$Survived==0,]$Fare,col="red",add=T )
barplot(data.f[data.f$Survived==1,]$Fare,col="blue")
barplot(data.f[data.f$Survived==0,]$Fare,col="red",add=T )
hist(data.f[data.f$Survived==1,]$Fare,col="blue")
hist(data.f[data.f$Survived==0,]$Fare,col="red",add=T )
hist(data.f[data.f$Survived==1,]$Fare,col="blue")
hist(data.f[data.f$Survived==0,]$Fare,col="red",add=T )
ylim=400
hist(data.f[data.f$Survived==1,]$Fare,col="blue")
hist(data.f[data.f$Survived==0,]$Fare,col="red",add=T )
ylim=c(0,700)
ylim=c(0,700)
hist(data.f[data.f$Survived==1,]$Fare,col="blue")
hist(data.f[data.f$Survived==0,]$Fare,col="red",add=T )
hist(data.f[data.f$Survived==1,]$Fare,col="blue")
hist(data.f[data.f$Survived==0,]$Fare,col="red",add=T )
ylim(700)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 20)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=20,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 20)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=10,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 10)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 10,ylim=750)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 10)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 10)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 10)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 10)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
ylim=c(0,750)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",breaks = 10)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
ylim=c(0,750)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,750),breaks = 10)
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,750),breaks = 10,main = "Histogram of Fare")
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,add=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,stack()=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,stack=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
hist(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5,stacked=T)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
histStack(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5)
install.packages("plotrix")
install.packages("plotrix")
library(readr) #For read_csv
library(dplyr)
library("fs") # for cross-platform directories (path_wd)
library("knitr") # For kable
library("gplots")
library(plotrix)
hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
histStack(data.f[data.f$Survived==0,]$Fare,col="red",breaks=5)
#hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
histStack(x=data.f$Fare,z=data.f$Survived,data=data.fcol="red",breaks=5)
#hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
histStack(x=data.f$Fare,z=data.f$Survived,data=data.f)
#hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
histStack(x=data.f$Fare,z=data.f$Survived,data=data.f,col=c("blue","red"))
legend(c("Survived=1","Survived=0"),col=c("blue","red"))
#hist(data.f[data.f$Survived==1,]$Fare,col="blue",ylim=c(0,700),breaks = 10,main = "Histogram of Fare")
histStack(x=data.f$Fare,z=data.f$Survived,data=data.f,col=c("red","blue"))
legend(c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=data.f$Survived,data=data.f,col=c("red","blue"),main = "Fare Histogram by Survived")
legend(c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=data.f$Survived,data=data.f,col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,750))
legend(c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=data.f$Survived,data=data.f,col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend(c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=data.f$Survived,data=data.f,col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend(legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=data.f$Survived,data=data.f,col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=data.f$Survived,col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=data.f$Survived,col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Fare,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Gender,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
histStack(x=data.f$Age,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Age,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,400))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Age,z=factor(data.f$Survived),col=c("red","blue"),main = "Age Histogram by Survived",ylim=c(0,400))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Sibsp+data.f$Parch,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
histStack(x=data.f$Sibsp+data.f$Parch,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived")
histStack(x=(data.f$Sibsp+data.f$Parch),z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived")
histStack(x=(data.f$Sibsp+data.f$Parch),z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",breaks=10)
data.f$Familysize=data.f$SibSp+data.f$Parch
histStack(x=data.f$SFamilysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived")
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived")
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Family size Histogram by Survived")
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Family size Histogram by Survived",xlim=c(2,10))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Family size Histogram by Survived",xlim=c(2,10),ylim=c(0,100))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Family size Histogram by Survived",xlim=c(1,10),ylim=c(0,100))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Age,z=factor(data.f$Survived),col=c("red","blue"),main = "Age Histogram by Survived",ylim=c(0,100),xlim=c(50,80))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Age,z=factor(data.f$Survived),col=c("red","blue"),main = "Age Histogram by Survived",ylim=c(0,400))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
summary(data.f)
sapply(data.f, function(x) sum(is.na(x)))
data <- read_csv("~/Desktop/DST/DST_Assessment_0/Report/01-Data.csv")
data.f= as.data.frame(data)
#read_csv imported data as tbl which is a subclass of data frame, however it behaves differentlt so I convert it to data.frame format.
sapply(data.f, function(x) sum(is.na(x)))
data.f<-data.f[,c(2:8,10,12)]
View(data.f)
data.f<-data.f[,c(2:8,10,12)]
knitr::opts_chunk$set(echo = TRUE)
library(readr) #For read_csv
library(dplyr)
library(fs) # for cross-platform directories (path_wd)
library(knitr) # For kable
library(gplots)
library(plotrix)
data <- read_csv("~/Desktop/DST/DST_Assessment_0/Report/01-Data.csv")
data.f= as.data.frame(data)
#read_csv imported data as tbl which is a subclass of data frame, however it behaves differentlt so I convert it to data.frame format.
head(data.f)
summary(data.f)
sapply(data.f, function(x) sum(is.na(x)))
data.f<-data.f[,c(2:8,10,12)]
data.f<-data.f[-which(is.na(data.f$Embarked)),]
data.f$Cabin<-
#Remove the rows with NA for Embarked variable.
#data.f<-data.f[-which(is.na(data.f$Embarked)),]
data.f$Embarked[is.na(data.f$Embarked)]<-mode(data.f$Embarked)
#Remove the rows with NA for Embarked variable.
View(data.f)
sum(is.na(data.f$Embarked))
View(data.f)
histStack(x=data.f$Fare,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=10)
histStack(x=data.f$Fare,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5)
histStack(x=data.f$Fare,z=factor(data.f$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5,cex=0.5)
histStack(x=data.f$Age,z=factor(data.f$Survived),col=c("red","blue"),main = "Age Histogram by Survived",ylim=c(0,400))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5,cex=0.5)
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Family size Histogram by Survived")
data.f$Familysize=data.f$SibSp+data.f$Parch
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Family size Histogram by Survived")
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5,cex=0.5)
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Family size Histogram by Survived",xlim=c(1,10),ylim=c(0,100))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"))
histStack(x=data.f$Familysize,z=factor(data.f$Survived),col=c("red","blue"),main = "Family size Histogram by Survived",xlim=c(1,10),ylim=c(0,100))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5,cex=0.5)
data.f$Embarked[is.na(data.f$Embarked)]<-mode(data.f$Embarked)
#Use mode for the missing "Embarked" values
data.f$Age[is.na(data.f$Age)]<-mean(data.f$Age,na.rm = T)
sapply(data.f, function(x) sum(is.na(x)))
if (.Platform$OS.type=="windows"){ # Windows uses double backslash for directories...
kddata<-read.csv("..\\data\\kddcup.data_10_percent.gz")
kddnames=read.table("..\\data\\kddcup.names",sep=":",skip=1,as.is=T)
}else{ # Everything else uses a forward slash.
kddata<-read.csv("../data/kddcup.data_10_percent.gz")
kddnames=read.table("../data/kddcup.names",sep=":",skip=1,as.is=T)
}
colnames(kddata)=c(kddnames[,1],"normal")
library(dplyr) # allows the nice %>% notation, along with many other functionalities
library(caret) # for Cross-validation functions
library("pROC") # For reporting performance ("Receiver-Operating-Characteristic" or ROC curves)
if (.Platform$OS.type=="windows"){ # Windows uses double backslash for directories...
kddata<-read.csv("..\\data\\kddcup.data_10_percent.gz")
kddnames=read.table("..\\data\\kddcup.names",sep=":",skip=1,as.is=T)
}else{ # Everything else uses a forward slash.
kddata<-read.csv("../data/kddcup.data_10_percent.gz")
kddnames=read.table("../data/kddcup.names",sep=":",skip=1,as.is=T)
}
colnames(kddata)=c(kddnames[,1],"normal")
library(dplyr) # allows the nice %>% notation, along with many other functionalities
library(caret) # for Cross-validation functions
library(caret)
install.packages("tidyselect")
library(dplyr) # allows the nice %>% notation, along with many other functionalities
library(caret) # for Cross-validation functions
library("pROC") # For reporting performance ("Receiver-Operating-Characteristic" or ROC curves)
list("protocoltype"=table(kddata[,"protocol_type"]),
"service_raw"=table(kddata[,"service"]) %>% length,
"service_transformed"=table(kddata[,"service"]) %>% length,
"zeroduration"=table(kddata[,"duration"]==0))
View(kddata)
table(kddata[,"service"])
trans=function(x){
x[,"logduration"]=log10(x[,"duration"])
x[,"zeroduration"]=(x[,"duration"]==0)
stab=table(x[,"service"])
sother=names(stab[stab<10])
x[x[,"service"]%in%sother,"service"]="other"
x[,"service"]=as.factor(as.character(x[,"service"]))
x
}
kddata2=trans(kddata)
trans=function(x){
x[,"logduration"]=log10(x[,"duration"])
x[,"zeroduration"]=(x[,"duration"]==0)
stab=table(x[,"service"])
sother=names(stab[stab<10])
x[x[,"service"]%in%sother,"service"]="other"
x[,"service"]=as.factor(as.character(x[,"service"]))
x
}
kddata2=trans(kddata)
View(kddata2)
View(kddata2)
stab
table(kddata[,"service"])
a=table(kddata[,"service"])
b=names(a[a<10])
a=table(kddata[,"service"])
b=names(a[a<10])
b
a=table(kddata[,"service"])
b=names(a[a<10])
a
b
set.seed(1)
n=dim(kddata)[1]
s=sample(1:n,n/2)
train=kddata2[s,]
test=kddata2[-s,]
hist(train[,"duration"],breaks=51)
hist(train[,"logduration"],breaks=51)
table(train[,"zeroduration"])
modelzero1 <- glm(zeroduration ~ protocol_type + service,
data = train,family=binomial(link='logit'))
## Note how we do logistic regression: a binomial with logit link function.
modeldur1 <- lm(logduration ~ protocol_type + service,
data = train[!train[,"zeroduration"],]) # The duration model is always CONDITIONAL on not being a zero duration record
trainzeropred1 <- modelzero1 %>% predict(train)
# traindurpred1 <- modeldur1 %>% predict(train) ## Error! Because you never seen icmp before in this model since they all have zero duration
traindurpred1 <- modeldur1 %>% predict(train[!train[,"zeroduration"],])
zerodurationroc=roc(train[,"zeroduration"],trainzeropred1)
plot(zerodurationroc,xlab="Specificity (1-False positive rate=True negative rate)",ylab="Sensitivity (True positive rate)")
abline(a=0,b= 1)
tw=which.min(abs(zerodurationroc$sensitivities-zerodurationroc$specificities))
mythresh=zerodurationroc$thresholds[tw] # solving for the threshold that has sensitivity closest to the specificity
points(zerodurationroc$sensitivities[tw],zerodurationroc$specificities[tw])
mythresh
tw
mythresh
myprediction=function(test,modelzero,modeldur,threshzero){
## A function to perform two-stage prediction for duration
## First predict the zeros
predictionszero <- modelzero %>% predict(test)
predictionszerocat=sapply(predictionszero,function(y){y>threshzero})
## Then go on to predict the duration, if it is not zero
predictionszerocat[test[,"protocol_type"]=="icmp"]=TRUE # manual decision for this prediction
predictionsdur = rep(-Inf,dim(test)[1])
predictionsdur[!predictionszerocat] <- modeldur %>% predict(test[!predictionszerocat,])
## Return the useful information
data.frame("zeroduration"=predictionszerocat,
"logduration"=predictionsdur,
"zerodurationraw"=predictionszero,
"duration"=exp(predictionsdur))
}
## Apply the function to the training data
trainpred0=myprediction(train,modelzero1,modeldur1,mythresh)
## Report the results as a contingency table
trainconftable0=table(data.frame(predzero=trainpred0[,"zeroduration"],zero=train[,"zeroduration"]))
print(trainconftable0)
print(trainconftable0/rowSums(trainconftable0))
trainpred=myprediction(train,modelzero1,modeldur1,0)
trainconftable=table(data.frame(predzero=trainpred[,"zeroduration"],zero=train[,"zeroduration"]))
print(trainconftable)
print(trainconftable/rowSums(trainconftable))
plot(train$logduration,trainpred$logduration)
abline(a=0,b=1)
cordata=cbind(truth=train$logduration,pred=trainpred$logduration)
cordata=cordata[apply(cordata,1,min)>-Inf,]
cor(cordata)
par(mfrow=c(1,2))
plot(10^(train$logduration),10^(trainpred$logduration),main="Linear space")
abline(a=0,b=1)
cor(10^(train$logduration),10^(trainpred$logduration))
testpred=myprediction(test,modelzero1,modeldur1,0)
plot(test$logduration,testpred$logduration)
abline(a=0,b=1)
cordata2=cbind(truth=test$logduration,pred=testpred$logduration)
cordata2=cordata2[apply(cordata2,1,min)>-Inf,]
cor(cordata2)
trainok=!train$zeroduration & !trainpred$zeroduration
testok=!test$zeroduration & !testpred$zeroduration
# Make predictions and compute the R2, RMSE and MAE
perfduration=data.frame( R2 = c(R2(train$logduration[trainok], trainpred$logduration[trainok]),
R2(test$logduration[testok], testpred$logduration[testok])),
RMSE = c(RMSE(train$logduration[trainok], trainpred$logduration[trainok]),
RMSE(test$logduration[testok], testpred$logduration[testok])),
MAE = c(MAE(train$logduration[trainok], trainpred$logduration[trainok]),
MAE(test$logduration[testok], testpred$logduration[testok])))
rownames(perfduration)=c("train","test")
perfzero=data.frame( R2 = c(R2(train$zeroduration, trainpred$zeroduration),
R2(test$zeroduration, testpred$zeroduration)),
RMSE = c(RMSE(train$zeroduration, trainpred$zeroduration),
RMSE(test$zeroduration, testpred$zeroduration)),
MAE=c(MAE(train$zeroduration, trainpred$zeroduration),
MAE(test$zeroduration, testpred$zeroduration)))
rownames(perfzero)=c("train","test")
print(perfduration)
print(perfzero)
data <- read_csv(path_wd("01-Data.csv"))
if(!require("readr")) install.packages("readr")
if(!require("dplyr")) install.packages("dplyr")
library("fs") # for cross-platform directories (path_wd)
library("readr") #For read_csv
library("dplyr")
library("knitr") # For kable
data <- read_csv(path_wd("01-Data.csv"))
View(data)
data <- read_csv("~/Desktop/DST/DST_Assessment_0/Report/01-Data.csv")
data= as.data.frame(data)
#read_csv imported data as tbl which is a subclass of data frame, however it behaves differentlt so I convert it to data.frame format.
View(data)
head(data)
summary(data)
sapply(data, function(x) sum(is.na(x)))
data<-data[,c(2:8,10,12)]
data$Embarked[is.na(data$Embarked)]<-mode(data$Embarked)
#Use mode for the missing "Embarked" values.
data.f$Age[is.na(data.f$Age)]<-mean(data.f$Age,na.rm = T)
data$Embarked[is.na(data$Embarked)]<-mode(data$Embarked)
#Use mode for the missing "Embarked" values.
data$Age[is.na(data$Age)]<-mean(data$Age,na.rm = T)
#Use average of the existing age values for the missing "Age" values.
sapply(data, function(x) sum(is.na(x)))
labs=unique(as.character(data[,"Embarked"]))
names(labs)=labs
list=lapply(labs,function(x){
data.f[data.f[,"Embarked"]==x,1:8]
})
labs=unique(as.character(data[,"Embarked"]))
names(labs)=labs
list=lapply(labs,function(x){
data[data[,"Embarked"]==x,1:8]
})
#Separate data in to three sub-data by the port of embark.
data %>% count(Embarked)
# Count each numbers of each value in the Embarked variable
data %>% count(Sex)
genders=unique(as.character(data[,"Sex"]))
names(genders)=genders
genders_data=lapply(genders,function(x){
data[data[,"Sex"]==x,]
})
male_data<-genders_data[1]
female_data<-genders_data[2]
female_data= as.data.frame(female_data)
male_data= as.data.frame(male_data)
# Separate data into two sub data by genders
fe_sur_rate <- sum(female_data$female.Survived)/dim(female_data)[1]
male_sur_rate <- sum(male_data$male.Survived)/dim(male_data)[1]
fe_sur_rate
male_sur_rate
histStack(x=data$Fare,z=factor(data$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
library(readr) #For read_csv
library(dplyr)
library(fs) # for cross-platform directories (path_wd)
library(knitr) # For kable
library(gplots)
library(plotrix)
histStack(x=data$Fare,z=factor(data$Survived),col=c("red","blue"),main = "Fare Histogram by Survived",ylim=c(0,800))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5,cex=0.5) #Add legend to indicates data for Survived and Dead
histStack(x=data$Age,z=factor(data$Survived),col=c("red","blue"),main = "Age Histogram by Survived",ylim=c(0,400))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5,cex=0.5)
data$Familysize=data$SibSp+data$Parch
histStack(x=data$Familysize,z=factor(data$Survived),col=c("red","blue"),main = "Family size Histogram by Survived")
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5,cex=0.5)
histStack(x=data$Familysize,z=factor(data$Survived),col=c("red","blue"),main = "Family size Histogram by Survived",xlim=c(1,10),ylim=c(0,100))
legend("topright",legend=c("Survived","Dead"),col=c("blue","red"),lwd=5,cex=0.5)
p3 <- ggplot(data, aes(x = Pclass, fill = Pclass)) +
geom_bar(stat='count', position='dodge') +
labs(x = 'Pclass') + geom_label(stat='count', aes(label=..count..)) +
theme(legend.position="none") + theme_grey()
p4 <- ggplot(data[!is.na(data$Survived),], aes(x = Pclass, fill = Survived)) +
geom_bar(stat='count', position='dodge') + labs(x = 'Pclass') +
theme(legend.position="none") + theme_grey()
p5 <- ggplot(data[!is.na(data$Survived),], aes(x = Pclass, fill = Survived)) +
geom_bar(stat='count', position='stack') +
labs(x = 'Pclass', y= "Count") + facet_grid(.~Sex) +
theme(legend.position="none") + theme_grey()
p6 <- ggplot(data[!is.na(data$Survived),], aes(x = Pclass, fill = Survived)) +
geom_bar(stat='count', position='fill') +
labs(x = 'Pclass', y= "Percent") + facet_grid(.~Sex) +
theme(legend.position="none") + theme_grey()
grid.arrange(p3, p4, p5, p6, ncol=2)
if(!require("readr")) install.packages("readr")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("gridExtra")) install.packages("gridExtra")
if(!require("dplyr")) install.packages("dplyr")
if(!require("ggplots")) install.packages("ggplots")
if(!require("plotrix")) install.packages("plotrix")
library("fs") # for cross-platform directories (path_wd)
library("readr") #For read_csv
library("dplyr")
library("knitr") # For kable
library("ggplot2") # For plots
library("gridExtra")
library("gplots")
library("plotrix")# For general stacked histogram
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
